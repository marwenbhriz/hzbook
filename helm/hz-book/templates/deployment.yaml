apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  labels:
    {{- include "hx-apicore.labels" . | nindent 4 }}
    component: microservice
    tier: backend
spec:
  progressDeadlineSeconds: 300
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "hx-apicore.selectorLabels" . | nindent 6 }}
      component: microservice
      tier: backend
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 0
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "hx-apicore.selectorLabels" . | nindent 8 }}
        component: microservice
        tier: backend
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      terminationGracePeriodSeconds: {{ .Values.podTerminationGracePeriodSeconds }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: apicore
              containerPort: 9000
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            successThreshold: 1
            httpGet:
              path: /health_check
              port: apicore
            initialDelaySeconds: 3
            periodSeconds: 10
            timeoutSeconds: 5
          lifecycle:
            preStop:
              exec:
                command: [ "/bin/sleep", "20" ]
          env:
            - name: ENV
              value: {{ .Values.envVars.ENV | quote }}
          {{- range $key, $val := .Values.extraEnvVars }}
            - name: {{ $key }}
              value: {{ $val | quote }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
          - name: apicore-configs
            mountPath: /apicore/config.env
            subPath: config.env
          - name: apicore-configs
            mountPath: /config.env
            subPath: config.env
      volumes:
        - name: apicore-configs
          configMap:
            name: apicore-configs
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
